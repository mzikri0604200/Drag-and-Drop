/*! @name @bnnvara/videojs-chrome-pip @version 0.0.4 @license ISC */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('video.js'), require('global/document')) :
  typeof define === 'function' && define.amd ? define(['video.js', 'global/document'], factory) :
  (global.videojsChromePip = factory(global.videojs,global.document));
}(this, (function (videojs,document) { 'use strict';

  videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;
  document = document && document.hasOwnProperty('default') ? document['default'] : document;

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var version = "0.0.4";

  var PiP = "Picture in Picture";
  var en = {
  	PiP: PiP
  };

  var PiP$1 = "Minispeler";
  var nl = {
  	PiP: PiP$1
  };

  var Button = videojs.getComponent('Button');

  var checkSafari = function checkSafari(video) {
    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function';
  };

  videojs.addLanguage('en', en);
  videojs.addLanguage('nl', nl);

  var ChromePip =
  /*#__PURE__*/
  function (_Button) {
    _inheritsLoose(ChromePip, _Button);

    function ChromePip(player, options) {
      var _this;

      _this = _Button.call(this, player, options) || this;

      _this.controlText(player.localize('PiP'));

      _this.on(player, 'enterpictureinpicture', _this.handlePipEvent);

      return _this;
    }

    var _proto = ChromePip.prototype;

    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-chrome-pip " + _Button.prototype.buildCSSClass.call(this);
    };

    _proto.handlePipEvent = function handlePipEvent(event) {
      videojs.log('Entered PiP mode');
    };

    _proto.handleClick = function handleClick() {
      var video = this.player_.tech_.el_; // safari

      if (checkSafari(video)) {
        video.webkitSetPresentationMode(video.webkitPresentationMode === 'picture-in-picture' ? 'inline' : 'picture-in-picture');
        return;
      }

      if (!document.pictureInPictureElement) {
        video.requestPictureInPicture().catch(function (error) {
          videojs.log(error);
        });
      } else {
        document.exitPictureInPicture().catch(function (error) {
          videojs.log(error);
        });
      }
    };

    return ChromePip;
  }(Button); // Include the version number.


  ChromePip.VERSION = version; // Register the button with video.js.

  videojs.registerComponent('pip', ChromePip);

  var plugin = function plugin(options) {
    var _this2 = this;

    this.on('ready', function () {
      var cb = _this2.controlBar;

      if (document.pictureInPictureEnabled || checkSafari(_this2.tech_.el_)) {
        var Toggle = _this2.addChild('pip', options);

        cb.el().insertBefore(Toggle.el(), cb.fullscreenToggle.el());
      }
    });
  };

  videojs.registerPlugin('chromePip', plugin);

  return plugin;

})));
