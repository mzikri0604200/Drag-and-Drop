/*! @name @bnnvara/videojs-chrome-pip @version 0.0.4 @license ISC */
(function (videojs,QUnit,sinon) {
	'use strict';

	videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;
	QUnit = QUnit && QUnit.hasOwnProperty('default') ? QUnit['default'] : QUnit;
	sinon = sinon && sinon.hasOwnProperty('default') ? sinon['default'] : sinon;

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var empty = {};

	var empty$1 = /*#__PURE__*/Object.freeze({
		default: empty
	});

	var minDoc = ( empty$1 && empty ) || empty$1;

	var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
	    typeof window !== 'undefined' ? window : {};


	var doccy;

	if (typeof document !== 'undefined') {
	    doccy = document;
	} else {
	    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }
	}

	var document_1 = doccy;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var version = "0.0.4";

	var cov_ok8iaitn=function(){var path="/Users/hendrik/chrome-pip/lang/en.json",hash="77ebe52c59c6faacf598b676cd01411a782aa69a",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/hendrik/chrome-pip/lang/en.json",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:37}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var PiP=(cov_ok8iaitn.s[0]++,"Picture in Picture");var en = {PiP:PiP};

	var cov_5gglhyvtx=function(){var path="/Users/hendrik/chrome-pip/lang/nl.json",hash="4f28dbfb5308105e6151635639d7e87f2632309e",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/hendrik/chrome-pip/lang/nl.json",statementMap:{"0":{start:{line:1,column:17},end:{line:1,column:29}}},fnMap:{},branchMap:{},s:{"0":0},f:{},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var PiP$1=(cov_5gglhyvtx.s[0]++,"Minispeler");var nl = {PiP:PiP$1};

	var cov_15cvs4cc4m = function () {
	  var path = '/Users/hendrik/chrome-pip/src/plugin.js',
	      hash = '025c0372b32fd289808440d2fd7bfb01711a4f64',
	      Function = function () {}.constructor,
	      global = new Function('return this')(),
	      gcv = '__coverage__',
	      coverageData = {
	    path: '/Users/hendrik/chrome-pip/src/plugin.js',
	    statementMap: {
	      '0': {
	        start: {
	          line: 7,
	          column: 15
	        },
	        end: {
	          line: 7,
	          column: 45
	        }
	      },
	      '1': {
	        start: {
	          line: 9,
	          column: 20
	        },
	        end: {
	          line: 9,
	          column: 124
	        }
	      },
	      '2': {
	        start: {
	          line: 9,
	          column: 30
	        },
	        end: {
	          line: 9,
	          column: 123
	        }
	      },
	      '3': {
	        start: {
	          line: 11,
	          column: 0
	        },
	        end: {
	          line: 11,
	          column: 30
	        }
	      },
	      '4': {
	        start: {
	          line: 12,
	          column: 0
	        },
	        end: {
	          line: 12,
	          column: 30
	        }
	      },
	      '5': {
	        start: {
	          line: 17,
	          column: 4
	        },
	        end: {
	          line: 17,
	          column: 27
	        }
	      },
	      '6': {
	        start: {
	          line: 19,
	          column: 4
	        },
	        end: {
	          line: 19,
	          column: 45
	        }
	      },
	      '7': {
	        start: {
	          line: 20,
	          column: 4
	        },
	        end: {
	          line: 20,
	          column: 66
	        }
	      },
	      '8': {
	        start: {
	          line: 25,
	          column: 4
	        },
	        end: {
	          line: 25,
	          column: 53
	        }
	      },
	      '9': {
	        start: {
	          line: 29,
	          column: 4
	        },
	        end: {
	          line: 29,
	          column: 36
	        }
	      },
	      '10': {
	        start: {
	          line: 33,
	          column: 18
	        },
	        end: {
	          line: 33,
	          column: 40
	        }
	      },
	      '11': {
	        start: {
	          line: 36,
	          column: 4
	        },
	        end: {
	          line: 39,
	          column: 5
	        }
	      },
	      '12': {
	        start: {
	          line: 37,
	          column: 6
	        },
	        end: {
	          line: 37,
	          column: 127
	        }
	      },
	      '13': {
	        start: {
	          line: 38,
	          column: 6
	        },
	        end: {
	          line: 38,
	          column: 13
	        }
	      },
	      '14': {
	        start: {
	          line: 40,
	          column: 4
	        },
	        end: {
	          line: 50,
	          column: 5
	        }
	      },
	      '15': {
	        start: {
	          line: 41,
	          column: 6
	        },
	        end: {
	          line: 44,
	          column: 11
	        }
	      },
	      '16': {
	        start: {
	          line: 43,
	          column: 10
	        },
	        end: {
	          line: 43,
	          column: 29
	        }
	      },
	      '17': {
	        start: {
	          line: 46,
	          column: 6
	        },
	        end: {
	          line: 49,
	          column: 11
	        }
	      },
	      '18': {
	        start: {
	          line: 48,
	          column: 10
	        },
	        end: {
	          line: 48,
	          column: 29
	        }
	      },
	      '19': {
	        start: {
	          line: 55,
	          column: 0
	        },
	        end: {
	          line: 55,
	          column: 28
	        }
	      },
	      '20': {
	        start: {
	          line: 58,
	          column: 0
	        },
	        end: {
	          line: 58,
	          column: 44
	        }
	      },
	      '21': {
	        start: {
	          line: 60,
	          column: 15
	        },
	        end: {
	          line: 70,
	          column: 1
	        }
	      },
	      '22': {
	        start: {
	          line: 61,
	          column: 2
	        },
	        end: {
	          line: 69,
	          column: 5
	        }
	      },
	      '23': {
	        start: {
	          line: 62,
	          column: 15
	        },
	        end: {
	          line: 62,
	          column: 30
	        }
	      },
	      '24': {
	        start: {
	          line: 64,
	          column: 4
	        },
	        end: {
	          line: 68,
	          column: 5
	        }
	      },
	      '25': {
	        start: {
	          line: 65,
	          column: 21
	        },
	        end: {
	          line: 65,
	          column: 50
	        }
	      },
	      '26': {
	        start: {
	          line: 67,
	          column: 6
	        },
	        end: {
	          line: 67,
	          column: 66
	        }
	      },
	      '27': {
	        start: {
	          line: 72,
	          column: 0
	        },
	        end: {
	          line: 72,
	          column: 44
	        }
	      }
	    },
	    fnMap: {
	      '0': {
	        name: '(anonymous_0)',
	        decl: {
	          start: {
	            line: 9,
	            column: 20
	          },
	          end: {
	            line: 9,
	            column: 21
	          }
	        },
	        loc: {
	          start: {
	            line: 9,
	            column: 30
	          },
	          end: {
	            line: 9,
	            column: 123
	          }
	        },
	        line: 9
	      },
	      '1': {
	        name: '(anonymous_1)',
	        decl: {
	          start: {
	            line: 16,
	            column: 2
	          },
	          end: {
	            line: 16,
	            column: 3
	          }
	        },
	        loc: {
	          start: {
	            line: 16,
	            column: 31
	          },
	          end: {
	            line: 22,
	            column: 3
	          }
	        },
	        line: 16
	      },
	      '2': {
	        name: '(anonymous_2)',
	        decl: {
	          start: {
	            line: 24,
	            column: 2
	          },
	          end: {
	            line: 24,
	            column: 3
	          }
	        },
	        loc: {
	          start: {
	            line: 24,
	            column: 18
	          },
	          end: {
	            line: 26,
	            column: 3
	          }
	        },
	        line: 24
	      },
	      '3': {
	        name: '(anonymous_3)',
	        decl: {
	          start: {
	            line: 28,
	            column: 2
	          },
	          end: {
	            line: 28,
	            column: 3
	          }
	        },
	        loc: {
	          start: {
	            line: 28,
	            column: 24
	          },
	          end: {
	            line: 30,
	            column: 3
	          }
	        },
	        line: 28
	      },
	      '4': {
	        name: '(anonymous_4)',
	        decl: {
	          start: {
	            line: 32,
	            column: 2
	          },
	          end: {
	            line: 32,
	            column: 3
	          }
	        },
	        loc: {
	          start: {
	            line: 32,
	            column: 16
	          },
	          end: {
	            line: 51,
	            column: 3
	          }
	        },
	        line: 32
	      },
	      '5': {
	        name: '(anonymous_5)',
	        decl: {
	          start: {
	            line: 42,
	            column: 15
	          },
	          end: {
	            line: 42,
	            column: 16
	          }
	        },
	        loc: {
	          start: {
	            line: 42,
	            column: 24
	          },
	          end: {
	            line: 44,
	            column: 9
	          }
	        },
	        line: 42
	      },
	      '6': {
	        name: '(anonymous_6)',
	        decl: {
	          start: {
	            line: 47,
	            column: 15
	          },
	          end: {
	            line: 47,
	            column: 16
	          }
	        },
	        loc: {
	          start: {
	            line: 47,
	            column: 24
	          },
	          end: {
	            line: 49,
	            column: 9
	          }
	        },
	        line: 47
	      },
	      '7': {
	        name: '(anonymous_7)',
	        decl: {
	          start: {
	            line: 60,
	            column: 15
	          },
	          end: {
	            line: 60,
	            column: 16
	          }
	        },
	        loc: {
	          start: {
	            line: 60,
	            column: 33
	          },
	          end: {
	            line: 70,
	            column: 1
	          }
	        },
	        line: 60
	      },
	      '8': {
	        name: '(anonymous_8)',
	        decl: {
	          start: {
	            line: 61,
	            column: 19
	          },
	          end: {
	            line: 61,
	            column: 20
	          }
	        },
	        loc: {
	          start: {
	            line: 61,
	            column: 25
	          },
	          end: {
	            line: 69,
	            column: 3
	          }
	        },
	        line: 61
	      }
	    },
	    branchMap: {
	      '0': {
	        loc: {
	          start: {
	            line: 9,
	            column: 30
	          },
	          end: {
	            line: 9,
	            column: 123
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 9,
	            column: 30
	          },
	          end: {
	            line: 9,
	            column: 66
	          }
	        }, {
	          start: {
	            line: 9,
	            column: 70
	          },
	          end: {
	            line: 9,
	            column: 123
	          }
	        }],
	        line: 9
	      },
	      '1': {
	        loc: {
	          start: {
	            line: 36,
	            column: 4
	          },
	          end: {
	            line: 39,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 36,
	            column: 4
	          },
	          end: {
	            line: 39,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 36,
	            column: 4
	          },
	          end: {
	            line: 39,
	            column: 5
	          }
	        }],
	        line: 36
	      },
	      '2': {
	        loc: {
	          start: {
	            line: 37,
	            column: 38
	          },
	          end: {
	            line: 37,
	            column: 125
	          }
	        },
	        type: 'cond-expr',
	        locations: [{
	          start: {
	            line: 37,
	            column: 94
	          },
	          end: {
	            line: 37,
	            column: 102
	          }
	        }, {
	          start: {
	            line: 37,
	            column: 105
	          },
	          end: {
	            line: 37,
	            column: 125
	          }
	        }],
	        line: 37
	      },
	      '3': {
	        loc: {
	          start: {
	            line: 40,
	            column: 4
	          },
	          end: {
	            line: 50,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 40,
	            column: 4
	          },
	          end: {
	            line: 50,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 40,
	            column: 4
	          },
	          end: {
	            line: 50,
	            column: 5
	          }
	        }],
	        line: 40
	      },
	      '4': {
	        loc: {
	          start: {
	            line: 64,
	            column: 4
	          },
	          end: {
	            line: 68,
	            column: 5
	          }
	        },
	        type: 'if',
	        locations: [{
	          start: {
	            line: 64,
	            column: 4
	          },
	          end: {
	            line: 68,
	            column: 5
	          }
	        }, {
	          start: {
	            line: 64,
	            column: 4
	          },
	          end: {
	            line: 68,
	            column: 5
	          }
	        }],
	        line: 64
	      },
	      '5': {
	        loc: {
	          start: {
	            line: 64,
	            column: 8
	          },
	          end: {
	            line: 64,
	            column: 71
	          }
	        },
	        type: 'binary-expr',
	        locations: [{
	          start: {
	            line: 64,
	            column: 8
	          },
	          end: {
	            line: 64,
	            column: 40
	          }
	        }, {
	          start: {
	            line: 64,
	            column: 44
	          },
	          end: {
	            line: 64,
	            column: 71
	          }
	        }],
	        line: 64
	      }
	    },
	    s: {
	      '0': 0,
	      '1': 0,
	      '2': 0,
	      '3': 0,
	      '4': 0,
	      '5': 0,
	      '6': 0,
	      '7': 0,
	      '8': 0,
	      '9': 0,
	      '10': 0,
	      '11': 0,
	      '12': 0,
	      '13': 0,
	      '14': 0,
	      '15': 0,
	      '16': 0,
	      '17': 0,
	      '18': 0,
	      '19': 0,
	      '20': 0,
	      '21': 0,
	      '22': 0,
	      '23': 0,
	      '24': 0,
	      '25': 0,
	      '26': 0,
	      '27': 0
	    },
	    f: {
	      '0': 0,
	      '1': 0,
	      '2': 0,
	      '3': 0,
	      '4': 0,
	      '5': 0,
	      '6': 0,
	      '7': 0,
	      '8': 0
	    },
	    b: {
	      '0': [0, 0],
	      '1': [0, 0],
	      '2': [0, 0],
	      '3': [0, 0],
	      '4': [0, 0],
	      '5': [0, 0]
	    },
	    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
	  },
	      coverage = global[gcv] || (global[gcv] = {});

	  if (coverage[path] && coverage[path].hash === hash) {
	    return coverage[path];
	  }

	  coverageData.hash = hash;
	  return coverage[path] = coverageData;
	}();
	var Button = (cov_15cvs4cc4m.s[0]++, videojs.getComponent('Button'));
	cov_15cvs4cc4m.s[1]++;

	var checkSafari = function checkSafari(video) {
	  cov_15cvs4cc4m.f[0]++;
	  cov_15cvs4cc4m.s[2]++;
	  return (cov_15cvs4cc4m.b[0][0]++, video.webkitSupportsPresentationMode) && (cov_15cvs4cc4m.b[0][1]++, typeof video.webkitSetPresentationMode === 'function');
	};

	cov_15cvs4cc4m.s[3]++;
	videojs.addLanguage('en', en);
	cov_15cvs4cc4m.s[4]++;
	videojs.addLanguage('nl', nl);

	var ChromePip =
	/*#__PURE__*/
	function (_Button) {
	  _inheritsLoose(ChromePip, _Button);

	  function ChromePip(player, options) {
	    var _this;

	    cov_15cvs4cc4m.f[1]++;
	    cov_15cvs4cc4m.s[5]++;
	    _this = _Button.call(this, player, options) || this;
	    cov_15cvs4cc4m.s[6]++;

	    _this.controlText(player.localize('PiP'));

	    cov_15cvs4cc4m.s[7]++;

	    _this.on(player, 'enterpictureinpicture', _this.handlePipEvent);

	    return _this;
	  }

	  var _proto = ChromePip.prototype;

	  _proto.buildCSSClass = function buildCSSClass() {
	    cov_15cvs4cc4m.f[2]++;
	    cov_15cvs4cc4m.s[8]++;
	    return "vjs-chrome-pip " + _Button.prototype.buildCSSClass.call(this);
	  };

	  _proto.handlePipEvent = function handlePipEvent(event) {
	    cov_15cvs4cc4m.f[3]++;
	    cov_15cvs4cc4m.s[9]++;
	    videojs.log('Entered PiP mode');
	  };

	  _proto.handleClick = function handleClick() {
	    cov_15cvs4cc4m.f[4]++;
	    var video = (cov_15cvs4cc4m.s[10]++, this.player_.tech_.el_);
	    cov_15cvs4cc4m.s[11]++;

	    if (checkSafari(video)) {
	      cov_15cvs4cc4m.b[1][0]++;
	      cov_15cvs4cc4m.s[12]++;
	      video.webkitSetPresentationMode(video.webkitPresentationMode === 'picture-in-picture' ? (cov_15cvs4cc4m.b[2][0]++, 'inline') : (cov_15cvs4cc4m.b[2][1]++, 'picture-in-picture'));
	      cov_15cvs4cc4m.s[13]++;
	      return;
	    } else {
	      cov_15cvs4cc4m.b[1][1]++;
	    }

	    cov_15cvs4cc4m.s[14]++;

	    if (!document_1.pictureInPictureElement) {
	      cov_15cvs4cc4m.b[3][0]++;
	      cov_15cvs4cc4m.s[15]++;
	      video.requestPictureInPicture().catch(function (error) {
	        cov_15cvs4cc4m.f[5]++;
	        cov_15cvs4cc4m.s[16]++;
	        videojs.log(error);
	      });
	    } else {
	      cov_15cvs4cc4m.b[3][1]++;
	      cov_15cvs4cc4m.s[17]++;
	      document_1.exitPictureInPicture().catch(function (error) {
	        cov_15cvs4cc4m.f[6]++;
	        cov_15cvs4cc4m.s[18]++;
	        videojs.log(error);
	      });
	    }
	  };

	  return ChromePip;
	}(Button);

	cov_15cvs4cc4m.s[19]++;
	ChromePip.VERSION = version;
	cov_15cvs4cc4m.s[20]++;
	videojs.registerComponent('pip', ChromePip);
	cov_15cvs4cc4m.s[21]++;

	var plugin = function plugin(options) {
	  var _this2 = this;

	  cov_15cvs4cc4m.f[7]++;
	  cov_15cvs4cc4m.s[22]++;
	  this.on('ready', function () {
	    cov_15cvs4cc4m.f[8]++;
	    var cb = (cov_15cvs4cc4m.s[23]++, _this2.controlBar);
	    cov_15cvs4cc4m.s[24]++;

	    if ((cov_15cvs4cc4m.b[5][0]++, document_1.pictureInPictureEnabled) || (cov_15cvs4cc4m.b[5][1]++, checkSafari(_this2.tech_.el_))) {
	      cov_15cvs4cc4m.b[4][0]++;
	      var Toggle = (cov_15cvs4cc4m.s[25]++, _this2.addChild('pip', options));
	      cov_15cvs4cc4m.s[26]++;
	      cb.el().insertBefore(Toggle.el(), cb.fullscreenToggle.el());
	    } else {
	      cov_15cvs4cc4m.b[4][1]++;
	    }
	  });
	};

	cov_15cvs4cc4m.s[27]++;
	videojs.registerPlugin('chromePip', plugin);

	var Player = videojs.getComponent('Player');
	QUnit.test('the environment is sane', function (assert) {
	  assert.strictEqual(typeof Array.isArray, 'function', 'es5 exists');
	  assert.strictEqual(typeof sinon, 'object', 'sinon exists');
	  assert.strictEqual(typeof videojs, 'function', 'videojs exists');
	  assert.strictEqual(typeof plugin, 'function', 'plugin is a function');
	});
	QUnit.module('videojs-chrome-pip', {
	  beforeEach: function beforeEach() {
	    // Mock the environment's timers because certain things - particularly
	    // player readiness - are asynchronous in video.js 5. This MUST come
	    // before any player is created; otherwise, timers could get created
	    // with the actual timer methods!
	    this.clock = sinon.useFakeTimers();
	    this.fixture = document_1.getElementById('qunit-fixture');
	    this.video = document_1.createElement('video');
	    this.fixture.appendChild(this.video);
	    this.player = videojs(this.video);
	  },
	  afterEach: function afterEach() {
	    this.player.dispose();
	    this.clock.restore();
	  }
	});
	QUnit.test('registers itself with video.js', function (assert) {
	  assert.expect(2);
	  assert.strictEqual(typeof Player.prototype.chromePip, 'function', 'videojs-chrome-pip plugin was registered');
	  this.player.chromePip(); // Tick the clock forward enough to trigger the player to be "ready".

	  this.clock.tick(1);
	});

}(videojs,QUnit,sinon));
