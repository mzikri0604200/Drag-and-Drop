/*! @name @filmgardi/videojs-next-episode @version 1.0.2 @license MIT */
import videojs from 'video.js';
import document from 'global/document';
import window from 'global/window';

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var version = "1.0.2";

var DIALOG_ID = "Next_Episode_Container";
var START_POINT = 212;
var START_POINT_AMOUNT = START_POINT;

var NextEpisodeDialog =
/*#__PURE__*/
function () {
  function NextEpisodeDialog(player, options) {
    this.options = options;
    this.player = player;
    this.dialog = null;
    this.nextEpisodeText = "nextEpisodeText";
    this.titlePrefixText = "Next Episode";
    this.seasonText = "Season";
    this.episodeText = "Episode";
  }

  var _proto = NextEpisodeDialog.prototype;

  _proto.getImage = function getImage(poster) {
    if (poster) {
      return poster;
    } else return "#";
  };

  _proto.renderHtml = function renderHtml(data) {
    var _this = this;

    var _this$options = this.options,
        nextEpisodeText = _this$options.nextEpisodeText,
        titlePrefixText = _this$options.titlePrefixText,
        seasonText = _this$options.seasonText,
        episodeText = _this$options.episodeText,
        url = _this$options.url;
    var title = data.title,
        duration = data.duration,
        imdbRank = data.imdbRank,
        serialSeason = data.serialSeason,
        serialPart = data.serialPart,
        poster = data.poster;
    var dialogEl = document.createElement("div");
    dialogEl.id = "next-dialog";
    dialogEl.className = "next-dialog-container";
    dialogEl.innerHTML = "<a href=\"" + url + "\" class=\"next-dialog-link\"><div class=\"next-dialog-poster\">\n    <img src=\"" + this.getImage(poster) + "\"/></div>\n    <div class=\"next-dialog-content\">\n      <div class=\"next-base-title\"><span>" + (nextEpisodeText || this.nextEpisodeText) + "</span></div>\n      <div class=\"next-episode-title\">\n        <div class=\"episode-title\">" + (titlePrefixText || this.titlePrefixText) + " " + title + "</div>\n        <div class=\"episode-num\">" + (seasonText || this.seasonText) + " " + serialSeason + " \n        " + (episodeText || this.episodeText) + " " + serialPart + "</div>\n      </div>\n      <div class=\"next-episode-info\">\n        " + (duration ? "<span class=\"next-info-duration\">" + duration + "</span>" : "") + "\n        " + (imdbRank ? "<span class=\"next-info-imdb\">" + imdbRank + "</span>" : "") + "\n      </div>\n    </div></a>";
    var dialogActionEl = document.createElement("div");
    dialogActionEl.className = "next-dialog-action";
    dialogActionEl.title = "نرو قسمت بعدی";
    dialogActionEl.innerHTML = "\n    <svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 72 72\" width=\"80%\">\n        <circle class=\"next-autoplay-circle\" cx=\"36\" cy=\"36\" fill=\"#333\" fill-opacity=\"0.4\" r=\"31.5\">\n        </circle>\n        <circle class=\"next-autoplay-ring\" cx=\"-36\"\n          cy=\"36\" fill-opacity=\"0\" r=\"33.5\" stroke=\"#FFFFFF\" stroke-dasharray=\"211\" \n          stroke-dashoffset=\"" + START_POINT_AMOUNT + "\" stroke-width=\"4\" transform=\"rotate(-90)\">\n        </circle>\n        <g id=\"Group_1245\" data-name=\"Group 1245\" transform=\"translate(-50 -50)\">\n        <g id=\"EXIT\" transform=\"translate(50 50)\">\n        <rect id=\"Rectangle_550\" data-name=\"Rectangle 550\" width=\"7.04\" height=\"35.201\" rx=\"3.52\" transform=\"translate(46 22) rotate(45)\" fill=\"#fff\"></rect>\n        <rect id=\"Rectangle_551\" data-name=\"Rectangle 551\" width=\"7.04\" height=\"35.201\" rx=\"3.52\" transform=\"translate(51 47) rotate(135)\" fill=\"#fff\"></rect></g></g></svg>\n        <p>\u0646\u0631\u0648 \u0642\u0633\u0645\u062A \u0628\u0639\u062F\u06CC</p>";

    dialogActionEl.onclick = function () {
      return _this.stopAutoplay();
    };

    dialogEl.appendChild(dialogActionEl);
    var intervalId = setInterval(function () {
      var ringEl = document.getElementsByClassName("next-autoplay-ring")[0];

      if (ringEl) {
        START_POINT_AMOUNT = START_POINT_AMOUNT - 2.5;
        ringEl.setAttribute("stroke-dashoffset", START_POINT_AMOUNT);

        if (START_POINT_AMOUNT <= 0) {
          clearInterval(intervalId);

          _this.redirectToNextEpisode();
        }
      }
    }, 100);
    if (!window.intervalIdList) window.intervalIdList = [];
    window.intervalIdList.push({
      name: "nextAutoplay",
      id: intervalId
    });
    return dialogEl;
  };

  _proto.redirectToNextEpisode = function redirectToNextEpisode() {
    var url = this.options.url;

    if (url) {
      window.location.href = url;
    }
  };

  _proto.stopAutoplay = function stopAutoplay() {
    var _this2 = this;

    var player = this.player,
        options = this.options;
    START_POINT_AMOUNT = START_POINT;
    window.intervalIdList.map(function (item, index) {
      if (player.currentTime() > options.showDialogTime) {
        if (item.name === "nextEpisode") {
          clearInterval(item.id);
        }
      }

      if (item.name === "nextAutoplay") {
        clearInterval(item.id);
        window.intervalIdList.splice(index, 1);

        _this2.removeDialog();

        return;
      }
    });
  };

  _proto.createDialog = function createDialog() {
    var player = this.player,
        options = this.options;

    if (options.nextEpisodeData) {
      this.dialog = document.createElement("div");
      this.dialog.id = DIALOG_ID;
      this.dialog.className = "next-episode-dialog";
      this.dialog.appendChild(this.renderHtml(options.nextEpisodeData));

      if (player.id_) {
        var playerEl = document.getElementById(player.id_);

        if (playerEl) {
          playerEl.appendChild(this.dialog);
        }
      }
    }
  };

  _proto.isShow = function isShow() {
    var dialog = document.getElementById(DIALOG_ID);

    if (dialog) {
      return true;
    } else {
      return false;
    }
  };

  _proto.showDialog = function showDialog() {
    var dialog = document.getElementById(DIALOG_ID);

    if (dialog) {
      this.dialog = dialog;
      this.removeDialog();
    }

    this.createDialog();
  };

  _proto.removeDialog = function removeDialog() {
    var player = this.player;

    if (player.id_) {
      var playerEl = document.getElementById(player.id_);

      if (playerEl) {
        var dialog = document.getElementById(DIALOG_ID);

        if (dialog) {
          playerEl.removeChild(dialog);
        }
      }
    }
  };

  _proto.removeElement = function removeElement(elementId) {
    // Removes an element from the document.
    var element = document.getElementById(elementId);
    if (element) element.parentNode.removeChild(element);
  };

  return NextEpisodeDialog;
}();

NextEpisodeDialog.prototype.controlText_ = "NextEpisodeDialog";

var Button = videojs.getComponent("Button");
var Component = videojs.getComponent("Component");

var NextEpisodeButton =
/*#__PURE__*/
function (_Button) {
  _inheritsLoose(NextEpisodeButton, _Button);

  /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */
  function NextEpisodeButton(player, options) {
    var _this;

    _this = _Button.call(this, player, options) || this;
    _this.nextEpisodeDialog = new NextEpisodeDialog(player, options);
    return _this;
  }
  /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */


  var _proto = NextEpisodeButton.prototype;

  _proto.buildCSSClass = function buildCSSClass() {
    return "vjs-next-episode-control " + _Button.prototype.buildCSSClass.call(this);
  }
  /**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */
  ;

  _proto.handleClick = function handleClick(event) {
    if (window.innerWidth <= 800) {
      var voteCard = document.getElementsByClassName("vjs-vote-card")[0];

      if (voteCard && voteCard.classList.value.indexOf("vjs-hidden") === -1) {
        voteCard.parentNode.removeChild(voteCard);
      }
    }

    this.nextEpisodeDialog.showDialog();
  };

  return NextEpisodeButton;
}(Button);

NextEpisodeButton.prototype.controlText_ = "NextEpisode";

NextEpisodeButton.prototype.name = function () {
  return "NextEpisodeButton";
};

Component.registerComponent("NextEpisodeButton", NextEpisodeButton);

var Dom = videojs.dom;

var NextEpisode =
/*#__PURE__*/
function () {
  function NextEpisode(player, options) {
    this.player = player;
    this.options = options;
    this.nextEpisodeDialog = new NextEpisodeDialog(player, options);
  }

  var _proto = NextEpisode.prototype;

  _proto.addButtonToControlBar = function addButtonToControlBar() {
    var player = this.player,
        options = this.options;
    var nextEpisodeButton = new NextEpisodeButton(player, options);
    var placementIndex = player.controlBar.children().length - 3;
    var nextEpisodeButtonInstance = player.controlBar.addChild(nextEpisodeButton, {
      componentClass: "nextEpisodeButton"
    }, this.options.placementIndex || placementIndex);
    nextEpisodeButtonInstance.addClass("vjs-next-episode-button");
  };

  _proto.init = function init() {
    var _this = this;

    try {
      var player = this.player,
          options = this.options;

      if (options.url) {
        this.addButtonToControlBar();

        if (options.showDialogTime) {
          player.one("timeupdate", function () {
            if (!window.intervalIdList) window.intervalIdList = [];
            var intervalId = setInterval(function () {
              if (player) {
                if (!player.paused()) {
                  if (player.currentTime() > options.showDialogTime) {
                    if (!_this.nextEpisodeDialog.isShow()) {
                      _this.nextEpisodeDialog.showDialog();
                    }
                  }
                }
              }
            }, 500);
            window.intervalIdList.push({
              name: "nextEpisode",
              id: intervalId
            });
          });
        } else {
          videojs.log("The 'showDialogTime' is required.");
        }
      } else {
        videojs.log("The next episode 'url' is required.");
      }
    } catch (e) {
      videojs.log(e.message || "error on next-episode plugin.");
    }
  };

  return NextEpisode;
}();

NextEpisode.prototype.name = "NextEpisode";

var Plugin = videojs.getPlugin("plugin"); // Default options for the plugin.

var defaults = {};
/**
 * An advanced Video.js plugin. For more information on the API
 *
 * See: https://blog.videojs.com/feature-spotlight-advanced-plugins/
 */

var NextEpisodePlugin =
/*#__PURE__*/
function (_Plugin) {
  _inheritsLoose(NextEpisodePlugin, _Plugin);

  /**
   * Create a NextEpisodePlugin plugin instance.
   *
   * @param  {Player} player
   *         A Video.js Player instance.
   *
   * @param  {Object} [options]
   *         An optional options object.
   *
   *         While not a core part of the Video.js plugin architecture, a
   *         second argument of options is a convenient way to accept inputs
   *         from your plugin's caller.
   */
  function NextEpisodePlugin(player, options) {
    var _this;

    // the parent class will add player under this.player
    _this = _Plugin.call(this, player) || this;
    _this.options = videojs.mergeOptions(defaults, options);

    _this.player.ready(function () {
      _this.player.addClass("vjs-next-episode");

      var nextEpisode = new NextEpisode(_this.player, _this.options);
      nextEpisode.init();
      console.log("Create Next-Episode");
    });

    return _this;
  }

  return NextEpisodePlugin;
}(Plugin); // Define default values for the plugin's `state` object here.


NextEpisodePlugin.defaultState = {}; // Include the version number.

NextEpisodePlugin.VERSION = version; // Register the plugin with video.js.

videojs.registerPlugin("nextEpisode", NextEpisodePlugin);

export default NextEpisodePlugin;
