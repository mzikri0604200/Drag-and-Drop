import videojs from "video.js";
import NextEpisodeButton from "./NextEpisodeButton";
import NextEpisodeDialog from "./NextEpisodeDialog";
import document from "global/document";
import window from "global/window";

const Dom = videojs.dom;

class NextEpisode {
  constructor(player, options) {
    this.player = player;
    this.options = options;
    this.nextEpisodeDialog = new NextEpisodeDialog(player, options);
  }
  addButtonToControlBar() {
    const { player, options } = this;
    const nextEpisodeButton = new NextEpisodeButton(player, options);
    const placementIndex = player.controlBar.children().length - 3;

    const nextEpisodeButtonInstance = player.controlBar.addChild(
      nextEpisodeButton,
      { componentClass: "nextEpisodeButton" },
      this.options.placementIndex || placementIndex
    );

    nextEpisodeButtonInstance.addClass("vjs-next-episode-button");
  }

  init() {
    try {
      const { player, options } = this;
      if (options.url) {
        this.addButtonToControlBar();
        if (options.showDialogTime) {
          player.one("timeupdate", () => {
            if (!window.intervalIdList) window.intervalIdList = [];
            const intervalId = setInterval(() => {
              if (player) {
                if (!player.paused()) {
                  if (player.currentTime() > options.showDialogTime) {
                    if (!this.nextEpisodeDialog.isShow()) {
                      this.nextEpisodeDialog.showDialog();
                    }
                  }
                }
              }
            }, 500);
            window.intervalIdList.push({ name: "nextEpisode", id: intervalId });
          });
        } else {
          videojs.log("The 'showDialogTime' is required.");
        }
      } else {
        videojs.log("The next episode 'url' is required.");
      }
    } catch (e) {
      videojs.log(e.message || "error on next-episode plugin.");
    }
  }
}
NextEpisode.prototype.name = "NextEpisode";
export default NextEpisode;
