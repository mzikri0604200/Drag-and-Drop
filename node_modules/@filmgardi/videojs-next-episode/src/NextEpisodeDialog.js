import document from "global/document";
import window from "global/window";
import videjs from "video.js";

const DIALOG_ID = "Next_Episode_Container";
const START_POINT = 212;
let START_POINT_AMOUNT = START_POINT;
class NextEpisodeDialog {
  constructor(player, options) {
    this.options = options;
    this.player = player;
    this.dialog = null;
    this.nextEpisodeText = "nextEpisodeText";
    this.titlePrefixText = "Next Episode";
    this.seasonText = "Season";
    this.episodeText = "Episode";
  }

  getImage(poster) {
    if (poster) {
      return poster;
    } else return "#";
  }

  renderHtml(data) {
    const {
      nextEpisodeText,
      titlePrefixText,
      seasonText,
      episodeText,
      url
    } = this.options;
    const {
      title,
      duration,
      imdbRank,
      serialSeason,
      serialPart,
      poster,
    } = data;

    const dialogEl = document.createElement("div");
    dialogEl.id = "next-dialog";
    dialogEl.className = "next-dialog-container";
    dialogEl.innerHTML = `<a href="${url}" class="next-dialog-link"><div class="next-dialog-poster">
    <img src="${this.getImage(poster)}"/></div>
    <div class="next-dialog-content">
      <div class="next-base-title"><span>${
        nextEpisodeText || this.nextEpisodeText
      }</span></div>
      <div class="next-episode-title">
        <div class="episode-title">${
          titlePrefixText || this.titlePrefixText
        } ${title}</div>
        <div class="episode-num">${
          seasonText || this.seasonText
        } ${serialSeason} 
        ${episodeText || this.episodeText} ${serialPart}</div>
      </div>
      <div class="next-episode-info">
        ${duration ? `<span class="next-info-duration">${duration}</span>` : ""}
        ${imdbRank ? `<span class="next-info-imdb">${imdbRank}</span>` : ""}
      </div>
    </div></a>`;
    const dialogActionEl = document.createElement("div");
    dialogActionEl.className = "next-dialog-action";
    dialogActionEl.title = "نرو قسمت بعدی";
    dialogActionEl.innerHTML = `
    <svg height="100%" version="1.1" viewBox="0 0 72 72" width="80%">
        <circle class="next-autoplay-circle" cx="36" cy="36" fill="#333" fill-opacity="0.4" r="31.5">
        </circle>
        <circle class="next-autoplay-ring" cx="-36"
          cy="36" fill-opacity="0" r="33.5" stroke="#FFFFFF" stroke-dasharray="211" 
          stroke-dashoffset="${START_POINT_AMOUNT}" stroke-width="4" transform="rotate(-90)">
        </circle>
        <g id="Group_1245" data-name="Group 1245" transform="translate(-50 -50)">
        <g id="EXIT" transform="translate(50 50)">
        <rect id="Rectangle_550" data-name="Rectangle 550" width="7.04" height="35.201" rx="3.52" transform="translate(46 22) rotate(45)" fill="#fff"></rect>
        <rect id="Rectangle_551" data-name="Rectangle 551" width="7.04" height="35.201" rx="3.52" transform="translate(51 47) rotate(135)" fill="#fff"></rect></g></g></svg>
        <p>نرو قسمت بعدی</p>`;
    dialogActionEl.onclick = () => this.stopAutoplay();
    dialogEl.appendChild(dialogActionEl);

    const intervalId = setInterval(() => {
      const ringEl = document.getElementsByClassName("next-autoplay-ring")[0];
      if (ringEl) {
        START_POINT_AMOUNT = START_POINT_AMOUNT - 2.5;
        ringEl.setAttribute("stroke-dashoffset", START_POINT_AMOUNT);
        if (START_POINT_AMOUNT <= 0) {
          clearInterval(intervalId);
          this.redirectToNextEpisode();
        }
      }
    }, 100);
    if (!window.intervalIdList) window.intervalIdList = [];
    window.intervalIdList.push({ name: "nextAutoplay", id: intervalId });
    return dialogEl;
  }

  redirectToNextEpisode() {
    const { url } = this.options;
    if (url) {
      window.location.href = url;
    }
  }

  stopAutoplay() {
    const { player, options } = this;
    START_POINT_AMOUNT = START_POINT;
    window.intervalIdList.map((item, index) => {
      if (player.currentTime() > options.showDialogTime) {
        if (item.name === "nextEpisode") {
          clearInterval(item.id);
        }
      }
      if (item.name === "nextAutoplay") {
        clearInterval(item.id);
        window.intervalIdList.splice(index, 1);
        this.removeDialog();
        return;
      }
    });
  }
  createDialog() {
    const { player, options } = this;
    if (options.nextEpisodeData) {
      this.dialog = document.createElement("div");
      this.dialog.id = DIALOG_ID;
      this.dialog.className = "next-episode-dialog";
      this.dialog.appendChild(this.renderHtml(options.nextEpisodeData));
      if (player.id_) {
        const playerEl = document.getElementById(player.id_);
        if (playerEl) {
          playerEl.appendChild(this.dialog);
        }
      }
    }
  }
  isShow() {
    const dialog = document.getElementById(DIALOG_ID);
    if (dialog) {
      return true;
    } else {
      return false;
    }
  }
  showDialog() {
    const dialog = document.getElementById(DIALOG_ID);
    if (dialog) {
      this.dialog = dialog;
      this.removeDialog();
    }
    this.createDialog();
  }
  removeDialog() {
    const { player } = this;
    if (player.id_) {
      const playerEl = document.getElementById(player.id_);
      if (playerEl) {
        const dialog = document.getElementById(DIALOG_ID);
        if (dialog) {
          playerEl.removeChild(dialog);
        }
      }
    }
  }
  removeElement(elementId) {
    // Removes an element from the document.
    const element = document.getElementById(elementId);
    if (element) element.parentNode.removeChild(element);
  }
}
NextEpisodeDialog.prototype.controlText_ = "NextEpisodeDialog";
export default NextEpisodeDialog;
