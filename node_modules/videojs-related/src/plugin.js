import videojs from 'video.js';
import tmpl from 'blueimp-tmpl';

// Default options for the plugin.
const defaults = {
  //Video container title
  videoContainerTitle: 'More videos!',

  // Css class for the overlay wich will contain the related videos.
  className: 'related-video-wall',

  // Base url for fetching videos (REST)
  base_url: '/resources/related.json',

  // If the link privided by the video should goto the url set `true`.
  // If `false` it will replace the videojs source
  gotoUrl: true,
};

/**
 * Function to invoke when the player is ready.
 *
 * This is a great place for your plugin to initialize itself. When this
 * function is called, the player will have its DOM and child components
 * in place.
 *
 * @param    {Player} player
 * @param    {Object} [options={}]
 */
const onPlayerReady = (player, options) => {
  player.addClass('vjs-related');

  player.related.settings = options;
  player.related.createQuery = options.createQuery;

  player.on('play', function() {
    player.related.removeWall();
  });

  player.on('canplaythrough', function() {
    player.related.showWall();
  })

};

/**
 * When player is ready, load the plugin
 *
 * @param    {Object} [options={}]
 */
const related = function(options) {
  this.ready(() => {
    onPlayerReady(this, videojs.mergeOptions(defaults, options));
  });
};

/**
 * Handle the different actions you can do on the current video.
 * @param  {Object} event
 * @param  {Object} data
 */
related.handleActionClicks = function(event, data) {
  let expression = event.currentTarget.attributes.id.textContent;

  event.preventDefault();

  switch (expression) {
    case 'return':
      player.play();
      break;
    case 'fb':
      console.log('fb')
      break;
    case 'twitter':
      console.log('twitter')
      break;
    case 'copy':
      console.log('copy')
      break;
  }
}

/**
 * Create the container wich contains actions regarding the current video.
 * @return {DOMElement} Return the processed element.
 */
related.createActionContainer = function() {
  let actionContainerWrapper,
    buttons;

  actionContainerWrapper = document.createElement('div');
  actionContainerWrapper.className = 'action-container-wrapper';
  actionContainerWrapper.innerHTML = tmpl('related-actions', {})

  buttons = actionContainerWrapper.getElementsByClassName('action');

  for (let button of buttons) {
    button.addEventListener('click', function(e) {
      this.handleActionClicks(e)
    }.bind(this), false);
  }

  return actionContainerWrapper;
}

/**
 * Either goto a url or update player source.
 * @param  {Object} event
 * @param  {Object} data
 */
related.handleClickedVideo = function(event, data) {
  event.preventDefault();

  if (this.settings.gotoUrl) {
    window.location = event.target.href;
  }

  player.related.updateSource(event.target.href);
}

/**
 * Create the container wich contains list of related videos.
 * @return {DOMElement} Return the processed element.
 */
related.createVideoContainer = function(videos) {
  let videoContainerWrapper,
    videoElements;

  videoContainerWrapper = document.createElement('div');
  videoContainerWrapper.className = 'video-container-wrapper';
  videoContainerWrapper.innerHTML = tmpl('related-videos', {
    title: this.settings.videoContainerTitle,
    videos: videos
  });

  videoElements = videoContainerWrapper.getElementsByClassName('video-preview');

  for (let videoElement of videoElements) {
    videoElement.addEventListener('click', function(e) {
      this.handleClickedVideo(e);
    }.bind(this), false)
  }

  return videoContainerWrapper;
}

/**
 * Create wall containing actions on current video and videolist.
 *
 * @param  {Array} videos
 */
related.createWall = function(videos) {
  let wall,
    header;

  this.removeWall();

  wall = document.createElement('div');
  wall.className = this.settings.className;

  // Append to wall
  wall.appendChild(this.createActionContainer());
  wall.appendChild(this.createVideoContainer(videos));

  player.el().appendChild(wall);
}

/**
 * Load the json.
 *
 * @param  {String} query Should look like `key=value&otherKey=otherValue`
 */
related.loadSource = function(query) {
  let url = this.settings.base_url + '?' + query,
    request = new XMLHttpRequest();

  request.open('GET', url, true);
  request.send();
  request.onload = function() {
    var response = JSON.parse(this.response);
    player.trigger('related:fetched', {
      response: response
    })
  }
}

/**
 * Display the wall with its content.
 */
related.showWall = function() {
  let query = this.createQuery();
  this.loadSource(query);
}

/**
 * Remove the wall when not needed. eg. when video is playing.
 */
related.removeWall = function() {
  let wall = document.querySelector('.' + this.settings.className);
  if (wall != null) {
    wall.remove();
  }
}

/**
 * Update the videosjs source and play.
 *
 * @param  {String} source
 */
related.updateSource = function(source) {
  player.src(source);
  player.play();
}

window.tmpl = tmpl;

// Register the plugin with video.js.
videojs.plugin('related', related);

// Include the version number.
related.VERSION = '__VERSION__';

export default related;

// TODO: Make actions dynamic based on template?
// TODO: Maybe move templates to strings.
